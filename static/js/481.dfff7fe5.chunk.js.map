{"version":3,"file":"static/js/481.dfff7fe5.chunk.js","mappings":"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","sources":["components/partsOfPage/Container.jsx","components/styled/style.jsx","components/partsOfPage/Input.jsx","components/partsOfPage/InputWrapper.jsx","store/selectors.js","components/partsOfPage/contactForm/ContactForm.jsx","components/partsOfPage/ContactsList/ContactsListItem.jsx","components/partsOfPage/ContactsList/ContactList.jsx","components/partsOfPage/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Wrapper } from \"components/styled/style\"\n\nconst Container = ({children}) => {\n  return (\n    <Wrapper >{children}</Wrapper>\n  )\n}\n\nexport default Container","import styled from 'styled-components';\n \nconst Wrapper = styled.div`\n    padding: 0 32px;\n    width: 1460px;\n    margin: 0 auto;\n`\n\nconst List = styled.ul`\n    position: relative;\n    display: table-cell;\n    font-size: 24px;\n    text-transform: capitalize;\n    list-style: none;\n    span::before {\n        content: '';\n        margin-right: 8px;\n        display: inline-block;\n        width: 12px;\n        height: 12px;\n        border-radius: 50%;\n        background-color: #6f6ffa;\n\n    }\n    li:not(:last-child) {\n        padding-bottom: 8px; \n    }\n    span {\n        vertical-align: middle;\n        padding-right: 12px;\n    } \n`;\n\nconst InputContainer = styled.div`\n    display: flex;\n    width: 320px;\n    flex-direction: column;\n    align-items: flex-start;\n    text-transform: capitalize;\n    gap: 4px;\n    input {\n        width: 100%;\n        margin-bottom: 8px;\n        border-radius: 4px;\n        border: 1px solid #dbdbeb;\n        outline: none;\n        font-size: 16px;\n        text-transform: capitalize;\n        background-color: white;;\n        padding: 12px 15px;\n        margin: 8px 0;\n        width: 100%;\n        border-radius: 4px;\n    }\n    label {\n        font-style: italic;\n    }\n`;\n\nconst Container = styled.div`\n    margin: 20px;\n`;\n\nconst FormStyled = styled.form`\n    text-align: center;\n    /* background: #fff; */\n    display: flex;\n    flex-direction: column;\n    padding: 0 50px;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    background: rgba(0, 0, 0, 0);\n`; \n\nexport { Wrapper, List, InputContainer, Container, FormStyled}","\nconst Input = ({ htmlFor, label, id, type, name, value, onChange, placeholder}) => {\n    \n    return (\n        <>\n            <label htmlFor={htmlFor}>{label}</label>\n            <input id={id} \n                type={type}\n                name={name}\n                value={value}\n                onChange={onChange}\n                placeholder={placeholder}\n                required\n            />\n        </>\n    )\n}\n\nexport default Input","import { Container, InputContainer } from 'components/styled/style'\nimport Input from './Input'\n\n\nconst InputWrapper = ({ data, value, onChange }) => {\n    \n    return (\n        <Container>\n            {data.map((el, i) => (\n                <InputContainer key={el.name}>\n                    <Input\n                        htmlFor={el.name}\n                        label={el.name}\n                        id={el.name}\n                        type={el.type}\n                        name={el.name}\n                        value={value[i]}\n                        onChange={onChange}\n                    />\n                </InputContainer>\n            ))}\n        </Container>\n    )  \n}\n\nexport default InputWrapper","import { createSelector } from \"@reduxjs/toolkit\"\n\nexport const contactsSelector = (state) => state.contacts.items\nexport const isLoadingSelector = (state) => state.contacts.isLoading\nexport const errorSelector = (state) => state.contacts.error\n\nexport const filterSelector = (state) => state.filter.filter\nexport const filterListSelector = createSelector(contactsSelector, filterSelector, (items, filter) => {\n    return items.filter(user => user.name.toLowerCase().includes(filter.toLowerCase()))\n})\n\n","import { useState } from 'react'\nimport data from './data.json'\nimport { FormStyled } from 'components/styled/style'\nimport InputWrapper from '../InputWrapper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { contactsSelector } from 'store/selectors'\nimport { createContactsThunk } from 'store/Contacts/ThunkContacts'\nimport { Button } from 'components/styled/formStyled'\nimport { Notify } from 'notiflix'\n\n\nconst ContactForm = () => {\n  \n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const contacts = useSelector(contactsSelector)\n\n  const dispatch = useDispatch()\n  \n  const handlerChange = ({ target: { value, name } }) => {\n    switch (name) {\n      case 'name': setName(value)\n        break;\n      \n      case 'number': setNumber(value)\n        break;\n      \n      default:\n        return;\n    }\n  }\n\n  const handlerSubmit = (e) => {\n    e.preventDefault()\n    \n    const foundUser = contacts.find(contact =>\n      contact.name?.toLowerCase() === e.target.name.value.toLowerCase()\n    )\n       \n    if (foundUser) {\n      alert(`${e.target.name.value} is already in contacts`)\n      return;\n    }\n     \n    const formData = new FormData(e.currentTarget)\n    \n    const data = {}\n    formData.forEach((value, key) => {\n      if (value.length) {\n        data[key] = value\n      }\n    })\n\n    dispatch(createContactsThunk(data))\n    .unwrap()\n      .then((payload) => {\n        Notify.success('Contact has been successfully added!')\n       })\n      .catch((error) => {\n        Notify.failure('The contact was not added. Please try again.')\n    })\n    \n    setName('')\n    setNumber('')\n  }\n\n  return (\n        <FormStyled onSubmit={handlerSubmit}> \n          <InputWrapper data={data} value={[name, number]} onChange={handlerChange}/>\n      <Button type='submit'>Add contact</Button>\n        </FormStyled>\n    )\n}\nexport default ContactForm","\nimport { useDispatch } from \"react-redux\"\nimport { removeContactThunk } from \"store/Contacts/ThunkContacts\"\nimport { Button } from 'components/styled/formStyled';\n\nconst ContactsListItem = ({ contacts }) => {\n\n    const dispatch = useDispatch()\n\n   return (\n    <>\n        {contacts.map(contact => (\n            <li key={contact.id} id={contact.id}>\n                <span>{contact.name + ': ' + contact.number}</span>\n                <Button type=\"button\" onClick={() => dispatch(removeContactThunk(contact.id))}>Delete</Button> \n            </li>))\n        }\n    </>\n  )\n}\n\nexport default ContactsListItem","import { List } from 'components/styled/style'\nimport ContactsListItem from './ContactsListItem'\n\nimport { useSelector } from 'react-redux'\nimport { contactsSelector, filterListSelector, filterSelector } from 'store/selectors'\n\n\nconst ContactList = () => {\n\n    const contacts = useSelector(contactsSelector)\n    const filter = useSelector(filterSelector)\n    const filteredList = useSelector(filterListSelector)\n \n    return (        \n        <List>\n            {contacts && <ContactsListItem contacts={filter ? filteredList : contacts} />}    \n        </List>\n    )\n}\n\nexport default ContactList","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'store/sliceFilter';\nimport { filterSelector } from 'store/selectors';\n\nimport Input from './Input';\nimport { InputContainer } from 'components/styled/style';\n\nconst Filter = ({ title }) => {\n\n  const filter = useSelector(filterSelector)\n\n    const dispatch = useDispatch()\n\n    const filterContacts = ({target: {value}}) => {\n    dispatch(setFilter(value))\n  }\n\n    return (\n        <InputContainer>\n            <Input\n                htmlFor={'filterName'}\n                label={title}\n                type={'text'}\n                name={'filter'}\n                id={'filterName'}\n                placeholder={\"Search by name...\"}\n                value={filter}\n                onChange={filterContacts}\n            />\n        </InputContainer>     \n  )\n}\n\nexport default Filter;","import ContactForm from 'components/partsOfPage/contactForm/ContactForm'\nimport ContactList from 'components/partsOfPage/ContactsList/ContactList'\nimport Container from 'components/partsOfPage/Container'\nimport Filter from 'components/partsOfPage/Filter'\nimport Section from 'components/partsOfPage/Section'\nimport { SectionContacts, Title, TitleSection, Wrap } from 'components/styled/formStyled'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getContactsThunk } from 'store/Contacts/ThunkContacts'\nimport { errorSelector } from 'store/selectors'\n\nconst Contacts = () => {\n   const dispatch = useDispatch()\n    const error = useSelector(errorSelector)\n    \n    useEffect(() => {\n        dispatch(getContactsThunk())\n    }, [dispatch])\n  \n  return (\n    <>\n      <SectionContacts>\n        <Container>\n          <Wrap style={{flexDirection: 'column', width: '480px', padding: '60px 0'}}>  \n            <Title>Phonebook</Title>\n            <ContactForm />\n          </Wrap>\n        </Container>\n      </SectionContacts>\n      <Section>\n        <Container>\n          <TitleSection>Contacts</TitleSection>\n          <Filter title={'Find contacts by name'} />\n          {error && <h1>{error}</h1>}\n            <ContactList />\n        </Container>\n      </Section>\n    </>\n  )\n}\n\nexport default Contacts"],"names":["_ref","children","_jsx","Wrapper","styled","_templateObject","_taggedTemplateLiteral","List","_templateObject2","InputContainer","_templateObject3","Container","_templateObject4","FormStyled","_templateObject5","htmlFor","label","id","type","name","value","onChange","placeholder","_jsxs","_Fragment","required","data","map","el","i","Input","contactsSelector","state","contacts","items","errorSelector","error","filterSelector","filter","filterListSelector","createSelector","user","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","find","contact","_contact$name","target","alert","concat","formData","FormData","currentTarget","forEach","key","length","createContactsThunk","unwrap","then","payload","Notify","catch","InputWrapper","_ref$target","Button","onClick","removeContactThunk","filteredList","ContactsListItem","title","_ref2","setFilter","useEffect","getContactsThunk","SectionContacts","Wrap","style","flexDirection","width","padding","Title","ContactForm","Section","TitleSection","Filter","ContactList"],"sourceRoot":""}