{"version":3,"file":"static/js/537.d7f42f6f.chunk.js","mappings":"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","sources":["components/partsOfPage/Container.jsx","store/Contacts/selectors.js","components/partsOfPage/Input.jsx","components/partsOfPage/InputWrapper.jsx","components/partsOfPage/contactForm/ContactForm.jsx","components/partsOfPage/ContactsList/ContactsListItem.jsx","components/partsOfPage/ContactsList/ContactList.jsx","components/partsOfPage/Filter.jsx","components/partsOfPage/Section.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Wrapper } from \"components/styled/styled\"\n\nconst Container = ({children}) => {\n  return (\n    <Wrapper>{children}</Wrapper>\n  )\n}\n\nexport default Container","import { createSelector } from \"@reduxjs/toolkit\"\n\nexport const contactsSelector = (state) => state.contacts.items\nexport const isLoadingSelector = (state) => state.contacts.isLoading\nexport const errorSelector = (state) => state.contacts.error\n\nexport const filterSelector = (state) => state.filter.filter\nexport const filterListSelector = createSelector(contactsSelector, filterSelector, (items, filter) => {\n    return items.filter(user => user.name.toLowerCase().includes(filter.toLowerCase()))\n})\n\n","\nconst Input = ({ htmlFor, label, id, type, name, value, onChange, placeholder}) => {\n    \n    return (\n        <>\n            <label htmlFor={htmlFor}>{label}</label>\n            <input id={id} \n                type={type}\n                name={name}\n                value={value}\n                onChange={onChange}\n                placeholder={placeholder}\n                required\n            />\n        </>\n    )\n}\n\nexport default Input","import { Container, InputContainer } from 'components/styled/styled'\nimport Input from './Input'\n\n\nconst InputWrapper = ({ data, value, onChange }) => {\n    \n    return (\n        <Container>\n            {data.map((el, i) => (\n                <InputContainer key={el.name}>\n                    <Input\n                        htmlFor={el.name}\n                        label={el.name}\n                        id={el.name}\n                        type={el.type}\n                        name={el.name}\n                        value={value[i]}\n                        onChange={onChange}\n                    />\n                </InputContainer>\n            ))}\n        </Container>\n    )  \n}\n\nexport default InputWrapper","import { useState } from 'react'\nimport data from './data.json'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { contactsSelector } from 'store/Contacts/selectors'\nimport { createContactsThunk } from 'store/Contacts/ThunkContacts'\nimport { Button, FormStyled } from 'components/styled/styled'\nimport { Notify } from 'notiflix'\nimport InputWrapper from '../InputWrapper'\n\n\nconst ContactForm = () => {\n  \n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const contacts = useSelector(contactsSelector)\n\n  const dispatch = useDispatch()\n  \n  const handlerChange = ({ target: { value, name } }) => {\n    switch (name) {\n      case 'name': setName(value)\n        break;\n      \n      case 'number': setNumber(value)\n        break;\n      \n      default:\n        return;\n    }\n  }\n\n  const handlerSubmit = (e) => {\n    e.preventDefault()\n    \n    const foundUser = contacts.find(contact =>\n      contact.name?.toLowerCase() === e.target.name.value.toLowerCase()\n    )\n       \n    if (foundUser) {\n      alert(`${e.target.name.value} is already in contacts`)\n      return;\n    }\n     \n    const formData = new FormData(e.currentTarget)\n    \n    const data = {}\n    formData.forEach((value, key) => {\n      if (value.length) {\n        data[key] = value\n      }\n    })\n\n    dispatch(createContactsThunk(data))\n    .unwrap()\n      .then(() => {\n        Notify.success('Contact has been successfully added!')\n       })\n      .catch(() => {\n        Notify.failure('The contact was not added. Please try again.')\n    })\n    \n    setName('')\n    setNumber('')\n  }\n\n  return (\n        <FormStyled onSubmit={handlerSubmit}> \n          <InputWrapper data={data} value={[name, number]} onChange={handlerChange}/>\n          <Button type='submit'>Add contact</Button>\n        </FormStyled>\n    )\n}\nexport default ContactForm","\nimport { useDispatch } from \"react-redux\"\nimport { removeContactThunk } from \"store/Contacts/ThunkContacts\"\nimport { Button } from 'components/styled/styled';\n\nconst ContactsListItem = ({ contacts }) => {\n\n    const dispatch = useDispatch()\n\n   return (\n    <>\n        {contacts.map(contact => (\n            <li key={contact.id} id={contact.id}>\n                <span>{contact.name + ': ' + contact.number}</span>\n                <Button type=\"button\" onClick={() => dispatch(removeContactThunk(contact.id))}>Delete</Button> \n            </li>))\n        }\n    </>\n  )\n}\n\nexport default ContactsListItem","import { List } from 'components/styled/styled'\nimport ContactsListItem from './ContactsListItem'\n\nimport { useSelector } from 'react-redux'\nimport { contactsSelector, filterListSelector, filterSelector } from 'store/Contacts/selectors'\n\n\nconst ContactList = () => {\n\n    const contacts = useSelector(contactsSelector)\n    const filter = useSelector(filterSelector)\n    const filteredList = useSelector(filterListSelector)\n \n    return (        \n        <List>\n            {contacts && <ContactsListItem contacts={filter ? filteredList : contacts} />}    \n        </List>\n    )\n}\n\nexport default ContactList","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'store/Filter/sliceFilter';\nimport { filterSelector } from 'store/Contacts/selectors';\n\nimport Input from './Input';\nimport { InputContainer } from 'components/styled/styled';\n\nconst Filter = ({ title }) => {\n\n  const filter = useSelector(filterSelector)\n\n    const dispatch = useDispatch()\n\n    const filterContacts = ({target: {value}}) => {\n    dispatch(setFilter(value))\n  }\n\n    return (\n        <InputContainer>\n            <Input\n                htmlFor={'filterName'}\n                label={title}\n                type={'text'}\n                name={'filter'}\n                id={'filterName'}\n                placeholder={\"Search by name...\"}\n                value={filter}\n                onChange={filterContacts}\n            />\n        </InputContainer>     \n  )\n}\n\nexport default Filter;","import { SectionStyled } from \"components/styled/styled\"\n\nconst Section = ({children}) => {\n  return (\n    <SectionStyled>\n        { children }\n    </SectionStyled>\n  )\n}\n\nexport default Section","import ContactForm from 'components/partsOfPage/contactForm/ContactForm'\nimport ContactList from 'components/partsOfPage/ContactsList/ContactList'\nimport Container from 'components/partsOfPage/Container'\nimport Filter from 'components/partsOfPage/Filter'\nimport Section from 'components/partsOfPage/Section'\nimport { SectionContacts, Title, TitleSection, Wrap } from 'components/styled/styled'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getContactsThunk } from 'store/Contacts/ThunkContacts'\nimport { errorSelector } from 'store/Contacts/selectors'\n\nconst Contacts = () => {\n   const dispatch = useDispatch()\n    const error = useSelector(errorSelector)\n    \n    useEffect(() => {\n        dispatch(getContactsThunk())\n    }, [dispatch])\n  \n  return (\n    <>\n      <SectionContacts>\n        <Container>\n          <Wrap style={{flexDirection: 'column', width: '480px', padding: '60px 0'}}>  \n            <Title>Phonebook</Title>\n            <ContactForm />\n          </Wrap>\n        </Container>\n      </SectionContacts>\n      <Section>\n        <Container>\n          <TitleSection>Contacts</TitleSection>\n          <Filter title={'Find contacts by name'} />\n          {error && <h1>{error}</h1>}\n            <ContactList />\n        </Container>\n      </Section>\n    </>\n  )\n}\n\nexport default Contacts"],"names":["_ref","children","_jsx","Wrapper","contactsSelector","state","contacts","items","errorSelector","error","filterSelector","filter","filterListSelector","createSelector","user","name","toLowerCase","includes","htmlFor","label","id","type","value","onChange","placeholder","_jsxs","_Fragment","required","data","Container","map","el","i","InputContainer","Input","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","FormStyled","onSubmit","e","preventDefault","find","contact","_contact$name","target","alert","concat","formData","FormData","currentTarget","forEach","key","length","createContactsThunk","unwrap","then","Notify","catch","InputWrapper","_ref$target","Button","onClick","removeContactThunk","filteredList","List","ContactsListItem","title","_ref2","setFilter","SectionStyled","useEffect","getContactsThunk","SectionContacts","Wrap","style","flexDirection","width","padding","Title","ContactForm","Section","TitleSection","Filter","ContactList"],"sourceRoot":""}