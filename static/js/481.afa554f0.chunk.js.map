{"version":3,"file":"static/js/481.afa554f0.chunk.js","mappings":"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","sources":["components/partsOfPage/Input.jsx","components/partsOfPage/InputWrapper.jsx","store/selectors.js","components/partsOfPage/contactForm/ContactForm.jsx","components/partsOfPage/ContactsList/ContactsListItem.jsx","components/partsOfPage/ContactsList/ContactList.jsx","components/partsOfPage/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["\nconst Input = ({ htmlFor, label, id, type, name, value, onChange, placeholder}) => {\n    \n    return (\n        <>\n            <label htmlFor={htmlFor}>{label}</label>\n            <input id={id} \n                type={type}\n                name={name}\n                value={value}\n                onChange={onChange}\n                placeholder={placeholder}\n                required\n            />\n        </>\n    )\n}\n\nexport default Input","import { Container, InputContainer } from 'components/styled/style'\nimport Input from './Input'\n\n\nconst InputWrapper = ({ data, value, onChange }) => {\n    \n    return (\n        <Container>\n            {data.map((el, i) => (\n                <InputContainer key={el.name}>\n                    <Input\n                        htmlFor={el.name}\n                        label={el.name}\n                        id={el.name}\n                        type={el.type}\n                        name={el.name}\n                        value={value[i]}\n                        onChange={onChange}\n                    />\n                </InputContainer>\n            ))}\n        </Container>\n    )  \n}\n\nexport default InputWrapper","import { createSelector } from \"@reduxjs/toolkit\"\n\nexport const contactsSelector = (state) => state.contacts.items\nexport const isLoadingSelector = (state) => state.contacts.isLoading\nexport const errorSelector = (state) => state.contacts.error\n\nexport const filterSelector = (state) => state.filter.filter\nexport const filterListSelector = createSelector(contactsSelector, filterSelector, (items, filter) => {\n    return items.filter(user => user.name.toLowerCase().includes(filter.toLowerCase()))\n})\n\n","import { useState } from 'react'\nimport data from './data.json'\nimport { FormStyled } from 'components/styled/style'\n// import Button from 'components/partsOfPage/Nasil'\nimport InputWrapper from '../InputWrapper'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { contactsSelector } from 'store/selectors'\nimport { createContactsThunk } from 'store/Contacts/ThunkContacts'\n\n\nconst ContactForm = () => {\n  \n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const contacts = useSelector(contactsSelector)\n\n  const dispatch = useDispatch()\n  \n  const handlerChange = ({ target: { value, name } }) => {\n    switch (name) {\n      case 'name': setName(value)\n        break;\n      \n      case 'number': setNumber(value)\n        break;\n      \n      default:\n        return;\n    }\n  }\n\n  const handlerSubmit = (e) => {\n    e.preventDefault()\n    \n    const foundUser = contacts.find(contact =>\n      contact.name?.toLowerCase() === e.target.name.value.toLowerCase()\n    )\n       \n    if (foundUser) {\n      alert(`${e.target.name.value} is already in contacts`)\n      return;\n    }\n     \n    const formData = new FormData(e.currentTarget)\n    \n    const data = {}\n    formData.forEach((value, key) => {\n      if (value.length) {\n        data[key] = value\n      }\n    })\n\n    dispatch(createContactsThunk(data))\n    \n    setName('')\n    setNumber('')\n  }\n\n  return (\n        <FormStyled onSubmit={handlerSubmit}> \n          <InputWrapper\n            data={data}\n            value={[name, number]}\n            onChange={handlerChange}\n      />\n      \n          {/* <Button\n            text={'Add contact'}\n            type={'submit'}\n          /> */}\n        </FormStyled>\n    )\n}\nexport default ContactForm","import { Button } from \"components/styled/formStyled\"\nimport { useDispatch } from \"react-redux\"\nimport { removeContactThunk } from \"store/Contacts/ThunkContacts\"\n\nconst ContactsListItem = ({ contacts }) => {\n\n       const dispatch = useDispatch()\n\n   return (\n    <>\n        {contacts.map(contact => (\n            <li key={contact.id} id={contact.id}>\n                <span>{contact.name +': '+ contact.number}</span>\n                <Button type='button' text={\"Delete\"} onClick={() => dispatch(removeContactThunk(contact.id))}/>  \n            </li>))\n        }\n    </>\n  )\n}\n\nexport default ContactsListItem","import { List } from 'components/styled/style'\nimport ContactsListItem from './ContactsListItem'\n\nimport { useSelector } from 'react-redux'\nimport { contactsSelector, filterListSelector, filterSelector } from 'store/selectors'\n\n\nconst ContactList = () => {\n\n    const contacts = useSelector(contactsSelector)\n    const filter = useSelector(filterSelector)\n    const filteredList = useSelector(filterListSelector)\n \n    return (        \n        <List>\n            {contacts && <ContactsListItem contacts={filter ? filteredList : contacts} />}    \n        </List>\n    )\n}\n\nexport default ContactList","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'store/sliceFilter';\nimport { filterSelector } from 'store/selectors';\n\nimport Input from './Input';\nimport { InputContainer } from 'components/styled/style';\n\nconst Filter = ({ title }) => {\n\n  const filter = useSelector(filterSelector)\n\n    const dispatch = useDispatch()\n\n    const filterContacts = ({target: {value}}) => {\n    dispatch(setFilter(value))\n  }\n\n    return (\n        <InputContainer>\n            <Input\n                htmlFor={'filterName'}\n                label={title}\n                type={'text'}\n                name={'filter'}\n                id={'filterName'}\n                placeholder={\"Search by name...\"}\n                value={filter}\n                onChange={filterContacts}\n            />\n        </InputContainer>     \n  )\n}\n\nexport default Filter;","import ContactForm from 'components/partsOfPage/contactForm/ContactForm'\nimport ContactList from 'components/partsOfPage/ContactsList/ContactList'\nimport Container from 'components/partsOfPage/Container'\nimport Filter from 'components/partsOfPage/Filter'\nimport Section from 'components/partsOfPage/Section'\nimport { Title, TitleSection } from 'components/styled/style'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getContactsThunk } from 'store/Contacts/ThunkContacts'\nimport { errorSelector } from 'store/selectors'\n\nconst Contacts = () => {\n   const dispatch = useDispatch()\n    const error = useSelector(errorSelector)\n    \n    useEffect(() => {\n        dispatch(getContactsThunk())\n    }, [dispatch])\n  return (\n    <>\n      <Section>\n        <Container>\n          <Title>Phonebook</Title>\n          <ContactForm />\n        </Container>\n      </Section>\n      <Section>\n        <Container>\n          <TitleSection>Contacts</TitleSection>\n          <Filter title={'Find contacts by name'} />\n          {error && <h1>{error}</h1>}\n            <ContactList />\n        </Container>\n      </Section>\n    </>\n  )\n}\n\nexport default Contacts"],"names":["_ref","htmlFor","label","id","type","name","value","onChange","placeholder","_jsxs","_Fragment","children","_jsx","required","data","Container","map","el","i","InputContainer","Input","contactsSelector","state","contacts","items","errorSelector","error","filterSelector","filter","filterListSelector","createSelector","user","toLowerCase","includes","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","useSelector","dispatch","useDispatch","FormStyled","onSubmit","e","preventDefault","find","contact","_contact$name","target","alert","concat","formData","FormData","currentTarget","forEach","key","length","createContactsThunk","InputWrapper","_ref$target","Button","text","onClick","removeContactThunk","filteredList","List","ContactsListItem","title","_ref2","setFilter","useEffect","getContactsThunk","Section","Title","ContactForm","TitleSection","Filter","ContactList"],"sourceRoot":""}